import pandas as pd
from ete3 import Tree

def newick_distances(df, tree_file):
    # Load the phylogenetic tree from the Newick file
    tree = Tree(tree_file, format=1)

    # Initialize the Newick_Dist column with None values
    df['Newick_Dist'] = None

    # Iterate through each row in the DataFrame
    for idx, row in df.iterrows():
        current_node = row['Haplotype']
        
        # Identify the rows that match the criteria
        matching_rows = df[
            (df['Tree'] == row['Tree']) &
            (df['Read_Simulator'] == row['Read_Simulator']) &
            (df['Reads_or_Depth'] == row['Reads_or_Depth']) &
            (df['Panmap_Params'] == row['Panmap_Params']) &
            (df['Replicate'] == row['Replicate']) &
            (df['Num_Haplotypes_Param'] == row['Num_Haplotypes_Param']) &
            (~df['Haplotype_Index'].isnull())  # Haplotype_Index must not be null
        ]
        
        # Filter out the current row from the matching rows
        target_nodes = matching_rows['Haplotype'].tolist()

        # Calculate the minimum distance to any target node if there are target nodes available
        if target_nodes:
            if current_node in target_nodes:
                df.at[idx, 'Newick_Dist'] = 0
            else:
                try:
                    # Calculate distances to each target node and get the minimum distance
                    min_distance = min(tree.get_distance(current_node, target, topology_only=True) for target in target_nodes)
                    df.at[idx, 'Newick_Dist'] = min_distance
                except:
                    print(f"Warning: Node {current_node} not found in the tree.")
                    df.at[idx, 'Newick_Dist'] = None
        else:
            print(f"No matching nodes found for {current_node}")

    return df

# Future: add function to calculate genetic distance from MSA

# from Bio import SeqIO
# from Bio import AlignIO
# from Bio.Align import MultipleSeqAlignment
# from Bio.SeqRecord import SeqRecord

# Removed due to issues with msa files generated by PanmanUtils
# Getting ValueError: Sequences must all be the same length
# def genetic_distances(df, msa_file):
#     # Load the multi-sequence alignment
#     alignment = AlignIO.read(msa_file, "fasta")
#     sequences = {record.id: record.seq for record in alignment}

#     # Initialize the Genetic_Dist column with None values
#     df['Genetic_Dist'] = None

#     # Function to calculate genetic distance as a proportion of mismatches
#     def genetic_distance(seq1, seq2):
#         return sum(1 for a, b in zip(seq1, seq2) if a != b) / len(seq1)

#     # Iterate through each row in the DataFrame
#     for idx, row in df.iterrows():
#         current_haplotype = row['Haplotype']
        
#         # Identify the rows that match the criteria
#         matching_rows = df[
#             (df['Tree'] == row['Tree']) &
#             (df['Read_Simulator'] == row['Read_Simulator']) &
#             (df['Reads_or_Depth'] == row['Reads_or_Depth']) &
#             (df['Panmap_Params'] == row['Panmap_Params']) &
#             (df['Replicate'] == row['Replicate']) &
#             (df['Num_Haplotypes_Param'] == row['Num_Haplotypes_Param']) &
#             (~df['Haplotype_Index'].isnull())  # Haplotype_Index must not be null
#         ]
        
#         # Extract the target haplotypes for distance calculation
#         target_haplotypes = matching_rows['Haplotype'].tolist()

#         # Calculate the minimum genetic distance to any target haplotype
#         if target_haplotypes:
#             if current_haplotype in target_haplotypes:
#                 df.at[idx, 'Genetic_Dist'] = 0  # Exact match, distance is 0
#             else:
#                 # Get the current sequence
#                 if current_haplotype in sequences:
#                     current_seq = sequences[current_haplotype]
#                     # Calculate genetic distances and find the minimum
#                     min_distance = min(
#                         genetic_distance(current_seq, sequences[target])
#                         for target in target_haplotypes
#                         if target in sequences
#                     )
#                     df.at[idx, 'Genetic_Dist'] = min_distance
#                 else:
#                     print(f"Warning: Haplotype {current_haplotype} not found in MSA.")
#                     df.at[idx, 'Genetic_Dist'] = None
#         else:
#             print(f"No matching haplotypes found for {current_haplotype}")

#     return df
